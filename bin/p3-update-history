#!/usr/bin/env node

const config = require('../config')
const opts = require('commander')
const Path = require('path')
const fs = require('fs-extra')
const queueDir = config.get('queueDirectory')

if (require.main === module) {
  opts.option('-k, --key [value]', 'Index key')
    .option('-c, --confirm [value]', 'Confirm')
    .parse(process.argv)

  if (!opts.key) {
    console.error('Must supply key')
    opts.help()
  }

  if (!opts.confirm) {
    console.error('This operation will delete files and cannot be undone.')
    opts.help()
  }

  updateHistory(opts.key).then(() => {
    console.log(`complete updating ${opts.key}`)
  }).catch((err) => {
    console.error(err)
  })
}

function updateHistory (key) {
  return new Promise((resolve, reject) => {
    const fileDataPath = Path.join(queueDir, 'file_data', key)
    const historyPath = Path.join(queueDir, 'history', key)

    console.log(`Updating History ${historyPath}`)

    fs.readJson(historyPath, (err, data) => {
      if (err) {
        reject(err)
        return
      }

      data.state = 'indexed'
      data.indexCompletionTime = new Date()
      delete data.error

      fs.writeJson(historyPath, data, (err) => {
        if (err) {
          console.log(`Error writing to history: ${id}`)
          reject(err)
          return
        }

        console.log(`Removing files from : ${fileDataPath}`)
        fs.removeSync(fileDataPath)

        resolve(true)
      })
    })
  })
}
