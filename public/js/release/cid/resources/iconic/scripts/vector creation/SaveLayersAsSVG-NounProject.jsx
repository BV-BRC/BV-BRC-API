/*Copyright (C) 2012  P.J. Onori (pj@somerandomdude.com)This program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program.  If not, see <http://www.gnu.org/licenses/>.*//** Originally modified from Niels Bosma (niels.bosma@motorola.com)*/var folder = Folder.selectDialog();var document = app.activeDocument;var black = new CMYKColor();black.cyan=0, black.magenta=0, black.yellow=0, black.black=100;var colors = [black];if(document && folder){		var options = new ExportOptionsSVG();		var artboards = document.artboards.length;	var n = document.layers.length;			var fill;	for(var i=0; i<n; ++i)	{		hideAllLayers();		var layer = document.layers[i];		layer.visible = true;				if(layer.pageItems.length==0) continue;                 //store original size                 //resize template icon                  //copy contents                  //create new document                  //paste contents                  //recolor                  //save as SVG                  //close new document                        exportSizeByPixels(layer.pageItems[0], 100)                                         	}		showAllLayers();}function fillPath(pageItem, fillColor) {				var type = pageItem.typename;				switch(type)		{				case 'CompoundPathItem':					for(var i=0; i<pageItem.pathItems.length; i++)					{							fillPath(pageItem.pathItems[i], fillColor);					}					break;				case 'GroupItem':					for(var i=0; i<pageItem.pageItems.length; i++)					{							fillPath(pageItem.pageItems[i], fillColor);					}					break;				case 'PathItem':					pageItem.fillColor=fillColor;					break;				default:					alert(type);		}}function exportSize(target, multiplier) {		var oWidth=target.width;	var oHeight=target.height;            target.selected=true;    copy();    var docRef = documents.add();    docRef.activate();    paste();        target=docRef.layers[0].pageItems[0];		target.width*=multiplier;	target.height*=multiplier;		target.left=Math.round(target.left);	target.top=Math.round(target.top);    		docRef.artboards[0].artboardRect=target.geometricBounds;    ungroup(docRef.artboards[0].layer[0])		var file = new File(folder.fsName+"/"+layer.name+".svg");		var options = new ExportOptionsSVG();	options.artBoardClipping = true;		docRef.exportFile(file,ExportType.SVG,options);    docRef.close();    document.activate();	}function exportSizeByPixels(target, size) {		var oWidth=target.width;	var oHeight=target.height;            target.selected=true;    copy();    var docRef = documents.add();    docRef.activate();    paste();        target=docRef.layers[0].pageItems[0];	        if(target.width>target.height) {        target.width=size;        target.height=size*(oHeight/oWidth);    } else {        target.height=size;        target.width=size*(oWidth/oHeight);    }		target.left=Math.round(target.left);	target.top=Math.round(target.top);    		docRef.artboards[0].artboardRect=target.geometricBounds;	ungroup(docRef.layers[0])		var file = new File(folder.fsName+"/"+layer.name+".svg");	        var options = new ExportOptionsSVG();        options.artBoardClipping = true;	        docRef.exportFile(file,ExportType.SVG,options);        docRef.close();        document.activate();}function hideAllLayers(){	forEach(document.layers, function(layer) {		layer.visible = false;	});}function showAllLayers(){	forEach(document.layers, function(layer) {		layer.visible = true;	});		}function forEach(collection, fn){	var n = collection.length;	for(var i=0; i<n; ++i)	{		fn(collection[i]);	}}function ungroup(obj){	var elements = obj.pageItems;	if(elements.length<1){		obj.remove();		return;	}else{		for(var i=0;i<elements.length;i++)		{			try{				if(elements[i].parent.typename!="Layer")elements[i].moveBefore(obj);				if(elements[i].typename=="GroupItem")ungroup(elements[i]);			}catch(e){			}		}	}}/*Code to ungroup elementsvar doc;var itemKinds = new Array("pathItems","compoundPathItems","textFrames","placedItems","rasterItems","meshItems","pluginItems","graphItems","symbolItems","groupItems");function getChildAll(obj){	var childsArr = new Array();	for(var i=0;i<obj.pageItems.length;i++)childsArr.push(obj.pageItems[i]);	return childsArr;}if(app.activeDocument){	doc = app.activeDocument;	if(doc.groupItems.length)for(var i=0;i<doc.layers.length;i++)ungroup(doc.layers[i]);}function ungroup(obj){	var elements = getChildAll(obj);	if(elements.length<1){		obj.remove();		return;	}else{		for(var i=0;i<elements.length;i++)		{			try{				if(elements[i].parent.typename!="Layer")elements[i].moveBefore(obj);				if(elements[i].typename=="GroupItem")ungroup(elements[i]);			}catch(e){			}		}	}}*/