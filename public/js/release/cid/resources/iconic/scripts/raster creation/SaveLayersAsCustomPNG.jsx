/*Copyright (C) 2012  P.J. Onori (pj@somerandomdude.com)This program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program.  If not, see <http://www.gnu.org/licenses/>.*//** Originally modified from Niels Bosma (niels.bosma@motorola.com)*/var folder = Folder.selectDialog();var document = app.activeDocument;var w = new Window ("dialog", "Select icon color and size");w.orientation="column";var grpColorChooser = w.add("panel", undefined, "Color");grpColorChooser.preferredSize=[335, 190]grpColorChooser.orientation = "row";grpColorChooser.alignChildren="left";    var grpSlider = grpColorChooser.add("group");   grpSlider.margins=[0, 10, 20, 0];    grpSlider.orientation = "column";    grpSlider.alignChildren=["left", "top"];     /*var colorTitle = grpSlider.add ("statictext", undefined, "Select a color");    colorTitle.graphics.font = "dialog:18"*/            var red = grpSlider.add ("statictext", undefined, "Red:");        var grpRed = grpSlider.add("group");    grpRed.orientation = "row";    sliderRed = grpRed.add ("slider", undefined, 128, 0, 255);    var labelRed = grpRed.add ("edittext", undefined, 128);    labelRed.characters = 3;    labelRed.onChange = function () {        if(isNaN(labelRed.text)) labelRed.text=sliderRed.value=0        else {                sliderRed.value=labelRed.text=Math.min(255, Math.max(labelRed.text, 0));         }     drawSwatch(sliderRed.value, sliderBlue.value, sliderGreen.value);    }    sliderRed.onChanging = function () {labelRed.text = Math.round(sliderRed.value); drawSwatch(sliderRed.value, sliderBlue.value, sliderGreen.value);}        var green = grpSlider.add ("statictext", undefined, "Green:");    var grpGreen = grpSlider.add("group");    grpGreen.orientation = "row";    sliderGreen = grpGreen.add ("slider", undefined, 128, 0, 255);    var labelGreen = grpGreen.add ("edittext", undefined,128);    labelGreen.characters = 3;    labelGreen.onChange = function () {        if(isNaN(labelGreen.text)) labelGreen.text=sliderGreen.value=0        else {                sliderGreen.value=labelGreen.text=Math.min(255, Math.max(labelGreen.text, 0));         }     drawSwatch(sliderRed.value, sliderBlue.value, sliderGreen.value);    }               sliderGreen.onChanging = function () {labelGreen.text = Math.round(sliderGreen.value); drawSwatch(sliderRed.value, sliderBlue.value, sliderGreen.value);}        var blue = grpSlider.add ("statictext", undefined, "Blue:");    var grpBlue = grpSlider.add("group");    grpBlue.orientation = "row";    sliderBlue = grpBlue.add ("slider", undefined, 128, 0, 255);    var labelBlue = grpBlue.add ("edittext", undefined, 128);        labelBlue.characters = 3;    labelBlue.onChange = function () {        if(isNaN(labelBlue.text)) labelBlue.text=sliderBlue.value=0        else {                sliderBlue.value=labelBlue.text=Math.min(255, Math.max(labelBlue.text, 0));         }     drawSwatch(sliderRed.value, sliderBlue.value, sliderGreen.value);    }            sliderBlue.onChanging = function () {labelBlue.text = Math.round(sliderBlue.value); drawSwatch(sliderRed.value, sliderBlue.value, sliderGreen.value);}        var swatch = grpColorChooser.add("group", [10,10,120,120]);    swatch.alignChildren=["left", "top"]       swatch.margins=[0, 20,0,0];        g = swatch.graphics;    brush = g.newBrush(g.BrushType.SOLID_COLOR, [.5,.5,.5, 1]);    g.backgroundColor = brush;        var grpSizeChooser = w.add("panel", undefined, "Sizes");    grpSizeChooser.preferredSize=[335, 160]grpSizeChooser.alignChildren="left";var grpCheckboxes = grpSizeChooser.add("group");   grpCheckboxes.margins=[0, 10, 20, 0];   grpCheckboxes.orientation = "column";   grpCheckboxes.alignChildren=["left", "top"];   chk8px = grpCheckboxes.add ("checkbox", undefined, "8x8 pixels");   chk8px.value=true;    chk12px = grpCheckboxes.add ("checkbox", undefined, "12x12 pixels");     chk12px.value=true;    chk16px = grpCheckboxes.add ("checkbox", undefined, "16x16 pixels");     chk16px.value=true;    chk24px = grpCheckboxes.add ("checkbox", undefined, "24x24 pixels");     chk24px.value=true;    chk32px = grpCheckboxes.add ("checkbox", undefined, "32x32 pixels");     chk32px.value=true;var grpBtn = w.add ("group");grpBtn.margins=[0, 10, 0, 0];   grpBtn.alignment = ["right", "bottom"];   grpBtn.orientation = "row";   grpBtn.alignChildren = "fill";var btnOK = grpBtn.add ("button", undefined, "OK", {name: "ok"});var btnCancel = grpBtn.add ("button", undefined, "Cancel", {name: "cancel"});    btnOK.onClick = function () {        w.close();        init();   }btnCancel.onClick = function () {    w.close();   }w.show ();function init() {    if(document && folder){		var options = new ExportOptionsPNG24();	options.antiAliasing = true;	options.transparency = true;		var artboards = document.artboards.length;	var n = document.layers.length;		var fill = new RGBColor();    fill.red=Math.round(sliderRed.value), fill.green=Math.round(sliderGreen.value), fill.blue=Math.round(sliderBlue.value);    var cFolder = new Folder ( folder.absoluteURI+"/iconic_r"+String(fill.red)+"g"+String(fill.green)+"b"+String(fill.blue) ) ;    if(!cFolder.exists) cFolder.create();	for(var i=0; i<n; ++i)	{		hideAllLayers();		layer = document.layers[i];		layer.visible = true;				if(layer.pageItems.length==0) continue;				fillPath(layer.pageItems[0], fill);		/*create all size permutations*/				if(chk8px.value) exportSize(layer.pageItems[0], 1, cFolder);		if(chk12px.value) exportSize(layer.pageItems[0], 1.5, cFolder);		if(chk16px.value) exportSize(layer.pageItems[0], 2, cFolder);		if(chk24px.value) exportSize(layer.pageItems[0], 3, cFolder);		if(chk32px.value) exportSize(layer.pageItems[0], 4, cFolder);			}		showAllLayers();}}function fillPath(pageItem, fillColor) {				var type = pageItem.typename;				switch(type)		{				case 'CompoundPathItem':					for(var i=0; i<pageItem.pathItems.length; i++)					{							fillPath(pageItem.pathItems[i], fillColor);					}					break;				case 'GroupItem':					for(var i=0; i<pageItem.pageItems.length; i++)					{							fillPath(pageItem.pageItems[i], fillColor);					}					break;				case 'PathItem':					pageItem.fillColor=fillColor;					break;				default:					alert(type);		}}function exportSize(target, multiplier, folder) {	var oWidth=target.width;	var oHeight=target.height;		target.width*=multiplier;	target.height*=multiplier;		target.left=Math.round(target.left);	target.top=Math.round(target.top);		document.artboards[0].artboardRect=target.geometricBounds;		var file = new File(folder.fsName+"/"+layer.name+"_"+Math.round(target.width)+"x"+Math.round(target.height)+".png");		var options = new ExportOptionsPNG24();	options.artBoardClipping = true;		document.exportFile(file,ExportType.PNG24,options);		//reset	target.width=oWidth;	target.height=oHeight;}function hideAllLayers(){	forEach(document.layers, function(layer) {		layer.visible = false;	});}function showAllLayers(){	forEach(document.layers, function(layer) {		layer.visible = true;	});		}function forEach(collection, fn){	var n = collection.length;	for(var i=0; i<n; ++i)	{		fn(collection[i]);	}}function drawSwatch(red,green,blue) {    brush = g.newBrush(g.BrushType.SOLID_COLOR, [red/255,green/255,blue/255, 1]);    g.backgroundColor = brush; }