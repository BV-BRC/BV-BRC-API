#!/usr/bin/env node

const config = require('../config')
const opts = require('commander')
const Path = require('path')
const fs = require('fs-extra')
const queueDir = config.get('queueDirectory')

if (require.main === module) {
    opts.option('-k, --key <value>', 'Index key')
	.option('-a, --age <value>', 'Delete jobs older than <value> days')
	.option('-c, --confirm', 'Confirm')
	.parse(process.argv)

    
    if (!opts.confirm) {
	console.error('This operation will delete files and cannot be undone.')
	opts.help()
    }
    
    const historyPath = Path.join(queueDir, 'history')
    
    if (opts.key) {
	console.log(`using ${opts.key}`)
	/*
	updateHistory(opts.key).then(() => {
	    console.log(`complete updating ${opts.key}`)
	}).catch((err) => {
	    console.error(err)
	})
	*/
    }
    else if (opts.age)  {
	// 
	// Enumerate the contents of the history dir looking for files of the required age
	//
	const now = Date.now();
	console.log(`using ${opts.age}`)
	var dirent;
	const dir = fs.opendirSync(historyPath);
	var count = 1;
	while (dirent = dir.readSync())
	{
	    if (!dirent.isFile()) {
		continue;
	    }
	    try {
		const path = Path.join(dirent.path, dirent.name);
		const st = fs.statSync(path);
		const age = (now - st.ctimeMs) / 1000 / 86400;
		if (age < opts.age) {
		    continue;
		}
		var ok = true;
		// console.log(dirent.name, path, age, opts.age);
		updateHistory(dirent.name).then(() => {
		    console.log(`completed ${dirent.name}`);
		}).catch((err) => {
		    console.log(`update threw error ${err}`);
		    ok = false;
		});
		if (!ok)
		{
		    console.log(`update threw error ${err}`);
		    break;
		}
	    } catch (error) {
		console.log(`Error on ${dirent.name}: ${error}`)
		break;
	    }
	    break;
	}
	dir.closeSync();
	
    }
	
}

function updateHistory (key) {
  return new Promise((resolve, reject) => {
    const fileDataPath = Path.join(queueDir, 'file_data', key)
    const historyPath = Path.join(queueDir, 'history', key)

    console.log(`Updating History ${historyPath}`)

    fs.readJson(historyPath, (err, data) => {
      if (err) {
        reject(err)
        return
      }

      data.state = 'indexed'
      data.indexCompletionTime = new Date()
      delete data.error

      fs.writeJson(historyPath, data, (err) => {
        if (err) {
          console.log(`Error writing to history: ${key}: ${err}`)
          reject(err)
          return
        }

        console.log(`Removing files from : ${fileDataPath}`)
        fs.removeSync(fileDataPath)

        resolve(true)
      })
    })
  })
}
