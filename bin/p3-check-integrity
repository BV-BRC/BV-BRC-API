#!/usr/bin/env node

const Config = require('../config')
const opts = require('commander')

const fs = require('fs-extra')
const JSONStream = require('JSONStream')
const EventStream = require('event-stream')
const { httpGet } = require('../util/http')

const Url = require('url')
const SOLR_URL = Config.get('solr').url
const parsedSolrUrl = Url.parse(SOLR_URL)

const QUEUE_DIRECTORY = Config.get('queueDirectory')

const keyCores = ['genome', 'genome_amr', 'genome_feature', 'genome_sequence',
  'pathway', 'sp_gene']

if (require.main === module) {
  opts.option('-k, --key [value]', 'Index Key')
    .parse(process.argv)

  if (!opts.key) {
    console.error('Must supply key')
    opts.help()
  }

  runAnalysis(opts.key)
}

function runAnalysis (key) {
  getCountsFromHistory(key).then((history) => {
    const countMap = history.countMap
    const genomeId = history.genomeId

    console.log(`querying solr: ${genomeId}`)

    getCountsFromSolr(genomeId).then((solrCounts) => {
      const allCores = keyCores.map(core => {
        const isEqual = (countMap[core] - solrCounts[core]) === 0
        console.log(`  ${core}: ${solrCounts[core]}/${countMap[core]} - ${isEqual ? 'Pass' : 'Fail'}`)

        return isEqual
      })

      const isComplete = allCores.every(val => val === true)

      if (isComplete) {
        console.log(`${key} is indexed completely`)
      } else {
        console.error(`${key} is not indexed completely`)
      }
      process.exit(0)
    }, (err) => {
      console.error(`Unable to get counts from solr: ${err}`)
    })
  }, (err) => {
    console.error(`${key}: rejected reading history. ${err}`)
  })
}

function getCountsFromSolr (genomeId) {
  return new Promise((resolve, reject) => {
    const reqs = keyCores.map(core => getCountsPerCore(core, genomeId))

    Promise.all(reqs).then(body => {
      const countMap = {}
      body.forEach((count, i) => {
        countMap[keyCores[i]] = count
      })

      resolve(countMap)
    }).catch((err) => {
      reject(err)
    })
  })
}

function getCountsPerCore (core, genomeId) {
  return httpGet({
    hostname: parsedSolrUrl.hostname,
    port: parsedSolrUrl.port,
    path: `/solr/${core}/select?q=genome_id:${genomeId}&rows=0&wt=json`
  }).then((body) => {
    const data = JSON.parse(body)
    return data.response.numFound
  })
}

function getCountsFromHistory (key) {
  // const def = Defer()
  return new Promise((resolve, reject) => {
    let history, data
    try {
      history = fs.readFileSync(`${QUEUE_DIRECTORY}/history/${key}`, 'utf8')
      data = JSON.parse(history)
    } catch (e) {
      reject(e.message)
      return
    }

    console.log(`History ${key} files is okay. Reading json files to count...`)

    const historyDefs = Object.keys(data.files).map(key => {
      const path = useLocalFS(data.files[key].path)
      const size = data.files[key].size

      return (size < 104857600) ? getCountsFromFile(path) : getCountsFromFileStream(path)
    })

    const genomeId = getGenomeIdFromFile(useLocalFS(data.files.genome.path))

    Promise.all(historyDefs).then((countArray) => {
      const countMap = {}

      Object.keys(data.files).forEach((key, idx) => {
        countMap[key] = countArray[idx]
      })

      resolve({ isSuccessful: true, countMap: countMap, genomeId: genomeId })
    })
  })
}

function getCountsFromFile (file) {
  return new Promise((resolve, reject) => {
    fs.readJson(file, 'utf8', (err, obj) => {
      if (err) {
        reject(err)
        return
      }
      resolve(obj.length)
    })
  })
}

function getCountsFromFileStream (file) {
  return new Promise((resolve, reject) => {
    try {
      let length = 0
      fs.createReadStream(file, { encoding: 'utf8' })
        .pipe(JSONStream.parse('*'))
        .pipe(EventStream.mapSync((data) => {
          length++
        }))
        .on('close', () => {
          resolve(length)
        })
    } catch (e) {
      console.error(e)
      reject(e)
    }
  })
}

function getGenomeIdFromFile (file) {
  const genome = fs.readJsonSync(file, 'utf8')

  return genome[0]['genome_id']
}

function useLocalFS (filePath) {
  return filePath.replace('/disks/p3/var/indexing_queue', QUEUE_DIRECTORY)
}
