/*Copyright (C) 2012  P.J. Onori (pj@somerandomdude.com)This program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program.  If not, see <http://www.gnu.org/licenses/>.*//** Originally modified from Niels Bosma (niels.bosma@motorola.com)*/var folder = Folder.selectDialog();var document = app.activeDocument;var black = new RGBColor();black.red=0, black.green=0, black.blue=0;var white = new RGBColor();white.red=255, white.green=255, white.blue=255;var tan = new RGBColor();tan.red=222, tan.green=210, tan.blue=208;var brownLight = new RGBColor();brownLight.red=93, brownLight.green=80, brownLight.blue=79;var brownDark = new RGBColor();brownDark.red=61, brownDark.green=48, brownDark.blue=47;var red = new RGBColor();red.red=255, red.green=30, red.blue=0;var cyan = new RGBColor();cyan.red=0, cyan.green=173, cyan.blue=238;var magenta = new RGBColor();magenta.red=235, magenta.green=0, magenta.blue=139;var yellow = new RGBColor();yellow.red=255, yellow.green=241, yellow.blue=0;var green = new RGBColor();green.red=134, green.green=196, green.blue=64;var orange = new RGBColor();orange.red=249, orange.green=163, orange.blue=26;var blue = new RGBColor();blue.red=46, blue.green=82, blue.blue=164;var grayLight = new RGBColor();grayLight.red=170, grayLight.green=172, grayLight.blue=175;var grayDark = new RGBColor();grayDark.red=77, grayDark.green=77, grayDark.blue=79;var colors = [black, white, tan, brownLight, brownDark, red, cyan, magenta, yellow, green, orange, blue, grayLight, grayDark];var colorNames = ['black', 'white', 'tan', 'brown_light', 'brown_dark', 'red', 'cyan', 'magenta', 'yellow', 'green', 'orange', 'blue', 'gray_light', 'gray_dark'];if(document && folder){		var options = new ExportOptionsPNG24();	options.antiAliasing = true;	options.transparency = true;		var artboards = document.artboards.length;	var n = document.layers.length;			var fill;	var colorName;	for(var j=0; j<colors.length; j ++)	{	fill=colors[j];	colorName=colorNames[j];    var cFolder = new Folder ( folder.absoluteURI+"/"+colorName ) ;    if(!cFolder.exists) cFolder.create();    	for(var i=0; i<n; ++i)	{		hideAllLayers();		var layer = document.layers[i];		layer.visible = true;				if(layer.pageItems.length==0) continue;				fillPath(layer.pageItems[0], fill);		/*create all size permutations*/				exportSize(layer.pageItems[0], 1, cFolder);		exportSize(layer.pageItems[0], 1.5, cFolder);		exportSize(layer.pageItems[0], 2, cFolder);		exportSize(layer.pageItems[0], 3, cFolder);		exportSize(layer.pageItems[0], 4, cFolder);				/*		layer.pageItems[0].left=Math.round(layer.pageItems[0].left);		layer.pageItems[0].top=Math.round(layer.pageItems[0].top);												document.artboards[0].artboardRect=layer.pageItems[0].geometricBounds;				fillPath(layer.pageItems[0], fill);		var file = new File(folder.fsName+"/"+colorName+"/"+layer.name+".png");				var options = new ExportOptionsPNG24();		options.artBoardClipping = true;				document.exportFile(file,ExportType.PNG24,options);		*/	}	}		showAllLayers();}function fillPath(pageItem, fillColor) {				var type = pageItem.typename;				switch(type)		{				case 'CompoundPathItem':					for(var i=0; i<pageItem.pathItems.length; i++)					{							fillPath(pageItem.pathItems[i], fillColor);					}					break;				case 'GroupItem':					for(var i=0; i<pageItem.pageItems.length; i++)					{							fillPath(pageItem.pageItems[i], fillColor);					}					break;				case 'PathItem':					pageItem.fillColor=fillColor;					break;				default:					alert(type);		}}function exportSize(target, multiplier, folder) {		var oWidth=target.width;	var oHeight=target.height;		target.width*=multiplier;	target.height*=multiplier;		target.left=Math.round(target.left);	target.top=Math.round(target.top);		document.artboards[0].artboardRect=target.geometricBounds;		var file = new File(folder.fsName+"/"+layer.name+"_"+Math.round(target.width)+"x"+Math.round(target.height)+".png");		var options = new ExportOptionsPNG24();	options.artBoardClipping = true;		document.exportFile(file,ExportType.PNG24,options);		//reset	target.width=oWidth;	target.height=oHeight;}function hideAllLayers(){	forEach(document.layers, function(layer) {		layer.visible = false;	});}function showAllLayers(){	forEach(document.layers, function(layer) {		layer.visible = true;	});		}function forEach(collection, fn){	var n = collection.length;	for(var i=0; i<n; ++i)	{		fn(collection[i]);	}}